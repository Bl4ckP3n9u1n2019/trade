"""Daytrade.

trade: Financial Application Framework
http://trade.readthedocs.org/
https://github.com/rochars/trade
License: MIT

Copyright (c) 2015-2018 Rafael da Silva Rocha

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"""

from __future__ import absolute_import
from __future__ import division

from . occurrence import Occurrence, same_sign, average_price


class Daytrade(Occurrence):
    """A daytrade operation.

    Daytrades are operations of purchase and sale of an asset on
    the same date.

    Attributes:
        asset: An asset instance, the asset that is being traded.
        quantity: The traded quantity of the asset.
        purchase: A Operation object representing the purchase of the
            asset.
        sale: A Operation object representing the sale of the asset.
        update_position: Set to False, as daytrades don't change the
            portfolio position; they just create results.
    """

    update_position = False

    def __init__(self, operation_a, operation_b):
        """Create the daytrade object. A daytrade have 2 operations.

        - a purchase operation
        - a sale operation.
        """
        super(Daytrade, self).__init__(
            date=operation_a.date, subject=operation_a.subject,
        )
        purchase, sale = find_purchase_and_sale(operation_a, operation_b)
        self.extract_daytrade(purchase, sale)
        self.operations = [
            Occurrence(
                date=purchase.date,
                subject=purchase.subject,
                quantity=self.quantity,
                price=purchase.price
            ),
            Occurrence(
                date=sale.date,
                subject=sale.subject,
                quantity=self.quantity*-1,
                price=sale.price
            )]

    @property
    def results(self):
        """Returns the profit or the loss generated by the day trade."""
        return {
            'daytrades': abs(self.operations[1].real_value) - \
                                        abs(self.operations[0].real_value)
        }

    def update_accumulator(self, accumulator):
        """Updates the accumulator state with the day trade result."""
        self.update_accumulator_results(accumulator)

    def extract_daytrade(self, purchase, sale):
        """Extracts the daytraded quantity from 2 operations."""
        self.quantity = min([purchase.quantity, abs(sale.quantity)])
        purchase.quantity -= self.quantity
        sale.quantity += self.quantity

    def append_to_positions(self, container):
        """Saves a Daytrade object in the container.

        If there is already a day trade with the same asset on the
        container, then the day trades are merged.
        """
        if 'occurrences' not in container.data:
            container.data['occurrences'] = {}

        if 'daytrades' not in container.data['occurrences']:
            container.data['occurrences']['daytrades'] = {}

        if self.subject.symbol in container.data['occurrences']['daytrades']:
            self.merge_underlying(container, 0)
            self.merge_underlying(container, 1)
            container.data['occurrences']['daytrades'][self.subject.symbol].quantity +=\
                self.quantity
        else:
            container.data['occurrences']['daytrades'][self.subject.symbol] = self

    def merge_underlying(self, container, operation_index):
        """Merges one day trade underlying operation."""
        merge_operations(
            container.data['occurrences']['daytrades'][self.subject.symbol]\
                .operations[operation_index],
            self.operations[operation_index]
        )


def merge_operations(existing_operation, operation):
    """Merges two operations."""
    existing_operation.price = average_price(
        existing_operation.quantity,
        existing_operation.price,
        operation.quantity,
        operation.price
    )
    existing_operation.quantity += operation.quantity


def daytrade_condition(operation_a, operation_b):
    """Checks if two operations are day trades."""
    return (
        operation_a.subject.symbol == operation_b.subject.symbol and
        not same_sign(operation_a.quantity, operation_b.quantity)
    )


def find_purchase_and_sale(operation_a, operation_b):
    """Finds which operation is a purchase and which is a sale."""
    if operation_b.quantity > operation_a.quantity:
        return operation_b, operation_a
    return operation_a, operation_b